// <auto-generated />
using System;
using JsonSocialNetwork.MigrationEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JsonSocialNetwork.MigrationEF.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(127)")
                        .HasColumnName("address");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(127)")
                        .HasColumnName("description");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("is_admin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(31)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasAlternateKey("Phone");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Avatar", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("ContentFileName")
                        .HasColumnType("varchar(31)")
                        .HasColumnName("content_file_name");

                    b.HasKey("AccountId");

                    b.HasIndex("ContentFileName");

                    b.ToTable("avatars");
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Block", b =>
                {
                    b.Property<int>("BlockerAccountId")
                        .HasColumnType("int")
                        .HasColumnName("blocker_account_id");

                    b.Property<int>("BlockedAccountId")
                        .HasColumnType("int")
                        .HasColumnName("blocked_account_id");

                    b.HasKey("BlockerAccountId", "BlockedAccountId");

                    b.HasIndex("BlockedAccountId");

                    b.ToTable("blocks");
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorAccountId")
                        .HasColumnType("int")
                        .HasColumnName("author_account_id");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("body");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("date_created");

                    b.Property<int>("OwnerPostId")
                        .HasColumnType("int")
                        .HasColumnName("owner_post_id");

                    b.HasKey("Id");

                    b.HasIndex("AuthorAccountId");

                    b.HasIndex("OwnerPostId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Content", b =>
                {
                    b.Property<string>("FileName")
                        .HasColumnType("varchar(31)")
                        .HasColumnName("file_name");

                    b.Property<string>("ContentType")
                        .HasColumnType("varchar(31)")
                        .HasColumnName("content_type");

                    b.HasKey("FileName");

                    b.ToTable("contents");

                    b.HasData(
                        new
                        {
                            FileName = "default_avatar.png",
                            ContentType = "image/png"
                        },
                        new
                        {
                            FileName = "404_favicon.png",
                            ContentType = "image/png"
                        },
                        new
                        {
                            FileName = "404_page.jpg",
                            ContentType = "image/jpeg"
                        });
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OwnerAccountId")
                        .HasColumnType("int")
                        .HasColumnName("owner_account_id");

                    b.Property<int>("PartnerAccountId")
                        .HasColumnType("int")
                        .HasColumnName("partner_account_id");

                    b.HasKey("Id");

                    b.HasAlternateKey("OwnerAccountId", "PartnerAccountId");

                    b.HasIndex("PartnerAccountId");

                    b.ToTable("conversations");
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Friend", b =>
                {
                    b.Property<int>("SmallerAccountId")
                        .HasColumnType("int")
                        .HasColumnName("smaller_account_id");

                    b.Property<int>("BiggerAccountId")
                        .HasColumnType("int")
                        .HasColumnName("bigger_account_id");

                    b.HasKey("SmallerAccountId", "BiggerAccountId");

                    b.HasIndex("BiggerAccountId");

                    b.ToTable("friends");
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.FriendRequest", b =>
                {
                    b.Property<int>("SenderAccountId")
                        .HasColumnType("int")
                        .HasColumnName("sender_account_id");

                    b.Property<int>("ReceiverAccountId")
                        .HasColumnType("int")
                        .HasColumnName("receiver_account_id");

                    b.HasKey("SenderAccountId", "ReceiverAccountId");

                    b.HasIndex("ReceiverAccountId");

                    b.ToTable("friend_requests");
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Like", b =>
                {
                    b.Property<int>("AuthorAccountId")
                        .HasColumnType("int")
                        .HasColumnName("author_account_id");

                    b.Property<int>("OwnerPostId")
                        .HasColumnType("int")
                        .HasColumnName("owner_post_id");

                    b.HasKey("AuthorAccountId", "OwnerPostId");

                    b.HasIndex("OwnerPostId");

                    b.ToTable("likes");
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorAccountId")
                        .HasColumnType("int")
                        .HasColumnName("author_account_id");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("body");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("date_created");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.HasKey("Id");

                    b.HasIndex("AuthorAccountId");

                    b.HasIndex("ConversationId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorAccountId")
                        .HasColumnType("int")
                        .HasColumnName("author_account_id");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("body");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("date_modified");

                    b.HasKey("Id");

                    b.HasIndex("AuthorAccountId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.PostContent", b =>
                {
                    b.Property<string>("ContentFileName")
                        .HasColumnType("varchar(31)")
                        .HasColumnName("content_file_name");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.HasIndex("ContentFileName");

                    b.HasIndex("PostId");

                    b.ToTable("post_contents");
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("detail");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<byte>("Subject")
                        .HasColumnType("tinyint")
                        .HasColumnName("subject");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("reports");
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Avatar", b =>
                {
                    b.HasOne("JsonSocialNetwork.Domain.Entities.Account", null)
                        .WithOne()
                        .HasForeignKey("JsonSocialNetwork.Domain.Entities.Avatar", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JsonSocialNetwork.Domain.Entities.Content", null)
                        .WithMany()
                        .HasForeignKey("ContentFileName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Block", b =>
                {
                    b.HasOne("JsonSocialNetwork.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("BlockedAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JsonSocialNetwork.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("BlockerAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Comment", b =>
                {
                    b.HasOne("JsonSocialNetwork.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AuthorAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JsonSocialNetwork.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("OwnerPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("JsonSocialNetwork.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("OwnerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JsonSocialNetwork.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("PartnerAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Friend", b =>
                {
                    b.HasOne("JsonSocialNetwork.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("BiggerAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JsonSocialNetwork.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("SmallerAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.FriendRequest", b =>
                {
                    b.HasOne("JsonSocialNetwork.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("ReceiverAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JsonSocialNetwork.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("SenderAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Like", b =>
                {
                    b.HasOne("JsonSocialNetwork.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AuthorAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JsonSocialNetwork.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("OwnerPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Message", b =>
                {
                    b.HasOne("JsonSocialNetwork.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AuthorAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JsonSocialNetwork.Domain.Entities.Conversation", null)
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Post", b =>
                {
                    b.HasOne("JsonSocialNetwork.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AuthorAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.PostContent", b =>
                {
                    b.HasOne("JsonSocialNetwork.Domain.Entities.Content", null)
                        .WithMany()
                        .HasForeignKey("ContentFileName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JsonSocialNetwork.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JsonSocialNetwork.Domain.Entities.Report", b =>
                {
                    b.HasOne("JsonSocialNetwork.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
